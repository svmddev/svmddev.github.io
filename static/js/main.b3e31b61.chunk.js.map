{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["App","output","setOutput","useState","imageURL","setImageURL","React","createElement","className","onClick","async","imageFile","Promise","resolve","reject","input","document","type","accept","capture","addEventListener","event","file","target","files","Error","click","captureImage","response","fetch","method","body","result","json","downloadURL","responseBody","error","console","JSON","stringify","ok","alert","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","catch","ReactDOM","render","getElementById","configuration","URL","process","origin","concat","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"gJAgFeA,MA3Ef,WACE,MAAOC,EAAQC,GAAaC,mBAAS,OAC9BC,EAAUC,GAAeF,mBAAS,MAgCzC,OACEG,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAAA,UAAQC,UAAU,cAChBF,IAAAC,cAAA,UAAI,wBACJD,IAAAC,cAAA,UAAQE,QAlCQC,UACpB,IACE,MAAMC,QA6CZD,iBACE,OAAO,IAAIE,QAAQ,CAACC,EAASC,KAE3B,MAAMC,EAAQC,SAAST,cAAc,SACrCQ,EAAME,KAAO,OACbF,EAAMG,OAAS,UACfH,EAAMI,QAAU,cAGhBJ,EAAMK,iBAAiB,SAAWC,IAChC,MAAMC,EAAOD,EAAME,OAAOC,MAAM,GAC5BF,EACFT,EAAQS,GAERR,EAAO,IAAIW,MAAM,wBAKrBV,EAAMW,UAhEoBC,GAClBC,QAAiBC,MAAM,sBAAuB,CAClDC,OAAQ,OACRC,KAAMpB,IAGFqB,QAAeJ,EAASK,OAC9B5B,EAAY2B,EAAOE,aACnBhC,EAAU8B,EAAOG,cACjB,MAAOC,GACPC,QAAQD,MAAM,uCAAwCA,MAsBpB,iBAC/BnC,GACCK,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,WACJD,IAAAC,cAAA,SAAI+B,KAAKC,UAAUtC,IACnBK,IAAAC,cAAA,UAAQE,QAvBIC,UACpB,WACyBmB,MAAM,wBAAyB,CACpDC,OAAQ,OACRC,KAAMO,KAAKC,UAAU,CAAEL,YAAa9B,EAAU+B,aAAclC,OAEjDuC,IACXC,MAAM,+BAER,MAAOL,GACPC,QAAQD,MAAM,yBAA0BA,MAaF,oBCtC5C,MAAMM,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAiDN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAKC,IACJA,EAAaC,cAAgB,KAC3B,MAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,KACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BvB,QAAQwB,IAAI,6CAKZxB,QAAQwB,IAAI,2CAMrBC,MAAM1B,IACLC,QAAQD,MAAM,4CAA6CA,KCpFjE2B,IAASC,OAEL1D,IAAAC,cAACP,EAAG,MAENgB,SAASiD,eAAe,SDqBX,SAAkBC,GAC/B,GAA6C,kBAAmBhB,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,GAAwBxB,OAAOC,UAC3CwB,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAOxB,iBAAiB,OAAQ,KAC9B,MAAM6B,EAAK,GAAAqB,OAAMF,GAAsB,sBAEnC1B,IAiDV,SAAiCO,GAE/BpB,MAAMoB,GACHI,KAAKzB,IAGkB,MAApBA,EAAS2C,SACuD,IAAhE3C,EAAS4C,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CxB,UAAUC,cAAcwB,MAAMtB,KAAKC,IACjCA,EAAasB,aAAavB,KAAK,KAC7BT,OAAOC,SAASgC,aAKpB7B,EAAgBC,KAGnBa,MAAM,KACLzB,QAAQwB,IACN,mEArEAiB,CAAwB7B,GAIxBC,UAAUC,cAAcwB,MAAMtB,KAAK,KACjChB,QAAQwB,IACN,+GAMJb,EAAgBC,MC9CxB8B,I","file":"static/js/main.b3e31b61.chunk.js","sourcesContent":["\n// Updated App.js\nimport React, { useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [output, setOutput] = useState(null);\n  const [imageURL, setImageURL] = useState(null);\n\n  const handleCapture = async () => {\n    try {\n      const imageFile = await captureImage(); // Function to capture image from device camera\n      const response = await fetch(\"/sharprpm/postImage\", {\n        method: \"POST\",\n        body: imageFile,\n      });\n\n      const result = await response.json();\n      setImageURL(result.downloadURL);\n      setOutput(result.responseBody);\n    } catch (error) {\n      console.error(\"Error capturing or processing image:\", error);\n    }\n  };\n\n  const handleConfirm = async () => {\n    try {\n      const response = await fetch(\"/sharprpm/confirmPost\", {\n        method: \"POST\",\n        body: JSON.stringify({ downloadURL: imageURL, responseBody: output }),\n      });\n      if (response.ok) {\n        alert(\"Post confirmed successfully\");\n      }\n    } catch (error) {\n      console.error(\"Error confirming post:\", error);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>SharpRPM with Camera</h1>\n        <button onClick={handleCapture}>Capture Image</button>\n        {output && (\n          <div>\n            <h2>Output:</h2>\n            <p>{JSON.stringify(output)}</p>\n            <button onClick={handleConfirm}>Confirm Post</button>\n          </div>\n        )}\n      </header>\n    </div>\n  );\n}\n\nasync function captureImage() {\n  return new Promise((resolve, reject) => {\n    // Create an input element dynamically\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = 'image/*';\n    input.capture = 'environment'; // Optional: Use 'environment' to hint at the back camera on mobile devices\n\n    // Add an event listener to handle file selection\n    input.addEventListener('change', (event) => {\n      const file = event.target.files[0]; // Get the selected file\n      if (file) {\n        resolve(file);\n      } else {\n        reject(new Error('No image selected'));\n      }\n    });\n\n    // Trigger the file input\n    input.click();\n  });\n}\n\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nconst configuration = {\n  onUpdate: (registration) => {\n    if (registration && registration.waiting) {\n      if (window.confirm('New version available!  refresh to update your app?')) {\n        registration.waiting.postMessage({ type: 'SKIP_WAITING' });\n        window.location.reload();\n      }\n    }\n  }\n };\n  \nexport default function register(configuration) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\nregisterServiceWorker();"],"sourceRoot":""}