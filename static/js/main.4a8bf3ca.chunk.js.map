{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","apps","length","initializeApp","storage","db","firestore","App","output","setOutput","useState","imageURL","setImageURL","userId","React","createElement","className","onClick","async","imageFile","Promise","resolve","reject","input","document","type","accept","capture","addEventListener","event","file","target","files","Error","click","captureImage","fileName","concat","uuidv4","storageRef","ref","snapshot","put","downloadURL","getDownloadURL","response","fetch","method","headers","body","JSON","stringify","data","ok","result","json","error","console","collection","add","timestamp","FieldValue","serverTimestamp","image","alert","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","catch","ReactDOM","render","getElementById","configuration","URL","process","origin","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.4a8bf3ca.chunk.js","sourcesContent":["// Complete App.js\nimport React, { useState } from \"react\";\nimport firebase from \"firebase/app\";\nimport \"firebase/storage\";\nimport \"firebase/firestore\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n// Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCPhqcw6V8-wTSCkfDe-K2XGE2mGboUGY4\",\n  authDomain: \"sharprpm-7e0c1.firebaseapp.com\",\n  projectId: \"sharprpm-7e0c1\",\n  storageBucket: \"sharprpm-7e0c1.appspot.com\",\n  messagingSenderId: \"748428012046\",\n  appId: \"1:748428012046:web:34306907146c8efdd1ea5f\",\n  measurementId: \"G-X6MFFFESZ1\"\n};\n\n// Initialize Firebase\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nconst storage = firebase.storage();\nconst db = firebase.firestore();\n\nfunction App() {\n  const [output, setOutput] = useState(null);\n  const [imageURL, setImageURL] = useState(null);\n  const userId = \"m5lsoC4hpLhEOx8DRo1zYrMNR613\"; // Testing UUID\n\n  const handleCapture = async () => {\n    try {\n      const imageFile = await captureImage(); // Function to capture image\n      const fileName = `${userId}/${uuidv4()}`;\n      const storageRef = storage.ref(`images/${fileName}`);\n\n      // Upload the file\n      const snapshot = await storageRef.put(imageFile);\n      const downloadURL = await snapshot.ref.getDownloadURL();\n\n      // Call OCR Function\n      const response = await fetch(\n        \"https://us-central1-sharprpm.cloudfunctions.net/sharprpm_ocr-test\",\n        {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ data: downloadURL }),\n        }\n      );\n\n      if (response.ok) {\n        const result = await response.json();\n        setImageURL(downloadURL);\n        setOutput(result);\n      } else {\n        throw new Error(\"Failed to process image\");\n      }\n    } catch (error) {\n      console.error(\"Error capturing or processing image:\", error);\n    }\n  };\n\n  const handleConfirm = async () => {\n    try {\n      await db.collection(\"posts\").add({\n        userId,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n        image: imageURL,\n        response: output,\n      });\n      alert(\"Post confirmed successfully\");\n    } catch (error) {\n      console.error(\"Error confirming post:\", error);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>SharpRPM with Camera</h1>\n        <button onClick={handleCapture}>Capture Image</button>\n        {output && (\n          <div>\n            <h2>Output:</h2>\n            <pre>{JSON.stringify(output, null, 2)}</pre>\n            <button onClick={handleConfirm}>Confirm Post</button>\n          </div>\n        )}\n      </header>\n    </div>\n  );\n}\n\nasync function captureImage() {\n  return new Promise((resolve, reject) => {\n    const input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.accept = \"image/*\";\n    input.capture = \"environment\";\n\n    input.addEventListener(\"change\", (event) => {\n      const file = event.target.files[0];\n      if (file) {\n        resolve(file);\n      } else {\n        reject(new Error(\"No image selected\"));\n      }\n    });\n\n    input.click();\n  });\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nconst configuration = {\n  onUpdate: (registration) => {\n    if (registration && registration.waiting) {\n      if (window.confirm('New version available!  refresh to update your app?')) {\n        registration.waiting.postMessage({ type: 'SKIP_WAITING' });\n        window.location.reload();\n      }\n    }\n  }\n };\n  \nexport default function register(configuration) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\nregisterServiceWorker();"],"sourceRoot":""}